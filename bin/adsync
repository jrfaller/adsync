#!/usr/bin/env ruby

# This file is part of adsync.
#
# adsync is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# adsync is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with adsync.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2018 Jean-RÃ©my Falleri <jr.falleri@gmail.com>

require 'thor'
require 'progress_bar'
require 'yaml'
require 'open3'

require_relative '../lib/version.rb'

# The AdSync CLI class.
# It requires a configuration file in +$HOME/.adsync+. The file should contains
# a YAML configuration of the follinwg format :
#
#   PHONE_ID:
#     RULE_ID:
#     - PHONE_FOLDER
#     - COMPUTER_FOLDER
#
# such as :
#
#   XZ1GAS3770221012:
#     phone_pictures:
#     - storage/self/primary/DCIM/Camera/
#     - Pictures/photos/Camera/
#     sd_pictures:
#     - storage/43EE-1500/DCIM/Camera/
#     - Pictures/photos/Camera/
class AdSyncCli < Thor
  desc 'sync', 'sync files from all sources'
  method_option :yes, type: :boolean, aliases: '-y', default: false
  def sync
    sources = load_current_config
    sources.each_value do |folders|
      copy(folders[0], make_absolute(folders[1]), options[:yes])
    end
  end

  desc 'id', 'display id of the current usb device'
  def id
    puts read_id
  end

  desc 'config', 'display adsync config'
  def config
    puts load_config.to_yaml
  end

  desc 'version', 'display adsync version'
  def version
    puts AdSync::VERSION
  end

  no_commands do # rubocop:disable Metrics/BlockLength
    def copy(distant_folder, local_folder, confirm)
      check_copy_folders(distant_folder, local_folder)
      unique_distant_files = compute_unique_files(distant_folder, local_folder)
      puts "copying #{unique_distant_files.size} files from #{distant_folder} to #{local_folder}"
      return unless confirm

      bar = ProgressBar.new(unique_distant_files.size)
      unique_distant_files.each do |file|
        _out, err, info = Open3.capture3('adb', '-d', 'pull', "#{distant_folder}#{file}", local_folder)
        puts "Error executing adb: #{err}" unless info.success?
        bar.increment!
      end
    end

    def compute_unique_files(distant_folder, local_folder)
      distant_files = `adb -d ls "#{distant_folder}" | cut -c 28-`.split - ['.', '..']
      local_files = Dir.entries(local_folder) - ['.', '..']
      unique_distant_files = (distant_files - local_files)
      unique_distant_files
    end

    def check_copy_folders(distant_folder, local_folder)
      raise "Local folder #{local_folder} not found" unless File.exist?(local_folder)
      raise "Local folder #{local_folder} is not a directory" unless Dir.exist?(local_folder)

      _out, err, info = Open3.capture3('adb', '-d', 'shell', 'ls', distant_folder)
      raise "Error executing adb: #{err}" unless info.success?
    end

    def make_absolute(local_folder)
      "#{ENV['HOME']}/#{local_folder}"
    end

    def read_id
      out, err, info = Open3.capture3('adb', '-d', 'get-serialno')
      raise "Error executing adb: #{err}" unless info.success?

      out.strip
    end

    def load_current_config
      config = load_config
      id = read_id
      raise "No configuration for device #{id}" unless config.key?(id)

      config[id]
    end

    def load_config
      raise 'No configuration file' unless File.exist?("#{ENV['HOME']}/.adsync")

      YAML.load_file("#{ENV['HOME']}/.adsync")
    end
  end
end

AdSyncCli.start(ARGV)
